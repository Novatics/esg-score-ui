{"version":3,"file":"static/js/885.4cbdec4b.chunk.js","mappings":"+HAEA,IAAeA,EAAf,C,0MCCA,GAAeC,EAAAA,EAAAA,IAAOC,EAAAA,EAAtB,sECDaC,GAAiBF,EAAAA,EAAAA,IAAO,MAAPA,CAAH,iG,SC6D3B,EA/CmB,SAAC,GAQK,IAPvBG,EAOsB,EAPtBA,MACAC,EAMsB,EANtBA,KACAC,EAKsB,EALtBA,GACAC,EAIsB,EAJtBA,KACAC,EAGsB,EAHtBA,YACAC,EAEsB,EAFtBA,aACAC,EACsB,EADtBA,WAEA,GAAsBC,EAAAA,EAAAA,IAASN,GAA/B,eAAOO,EAAP,KAAcC,EAAd,KACMC,EAAWL,GAA8BG,EAAME,SAC/CC,EAAQL,GAAcE,EAAMG,MASlC,OACE,UAACZ,EAAD,WACGC,IACC,SAAC,IAAD,CAAYY,aAAc,EAAGC,QAAQ,QAArC,SACGb,KAGL,SAAC,EAAD,CACEc,KAAK,OACLC,WAhBmB,WACvB,OAAyBC,EAAAA,EAAAA,IAAGP,EAAM,UAAW,SAA7C,eAAOQ,EAAP,KAAgBC,EAAhB,KACA,OAAID,GAAWC,EACNA,EAEF,GACR,CAUiBC,GACZD,SAAUT,EAAKQ,UAAWR,EAAKS,OAC/BR,SAAUA,EACVU,OAAQZ,EAAMY,OACdT,MAAOA,EACPV,KAAMA,EACNoB,WAAS,EACTnB,GAAIA,EACJC,KAAMA,EACNC,YAAaA,EACbkB,WAAY,CACV,cAAc,GAAd,OAAkBrB,EAAlB,cAKT,E,UClDKsB,EAAmBC,EAAAA,GAAW,CAClCC,QAASD,EAAAA,KAAaE,SAAS,kCAAkCC,aAGpD,SAASC,IACtB,IAAQC,GAAeC,EAAAA,EAAAA,YAAWC,EAAAA,GAA1BF,WACFG,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACC,EAAA,EAAD,CACEhC,GAAI,CACFiC,OAAQ,QACRC,MAAO,QACPC,WAAY,8DACZC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,UAUE,UAACN,EAAA,EAAD,CACEhC,GAAI,CACFkC,MAAO,MACPD,OAAQ,QACRM,QAAS,EACTC,UAAW,EACXC,aAAc,EACdC,gBAAiB,wBAPrB,WAUE,SAACC,EAAA,EAAD,CAAYC,GAAI,EAAGC,UAAU,SAASC,MAAM,eAAenC,QAAQ,KAAnE,oCAGA,SAAC,KAAD,CACEoC,cAAe,CAAExB,QAAS,IAC1ByB,SAAU,SAACC,GACTtB,EAAWsB,EAAO1B,SAClBO,EAAS,gBACV,EACDoB,iBAAkB7B,EANpB,SAQG,kBACC,UAAC,KAAD,YACE,SAAC,EAAD,CACEvB,MAAM,iBACNC,KAAK,UACLE,KAAK,YAEP,SAACP,EAAA,EAAD,CACIiB,QAAQ,YACR,cAAY,cACZC,KAAK,SACLZ,GAAI,CACFkC,MAAO,OACPiB,GAAI,IACJP,GAAI,KAPV,iCAPH,QAyBV,C","sources":["components/Button/index.tsx","components/TextField/index.tsx","components/InputField/styles.ts","components/InputField/index.tsx","pages/CreditForm/index.tsx"],"sourcesContent":["import { Button } from '@mui/material'\n\nexport default Button\n","import { styled } from '@mui/material/styles'\nimport TextField from '@mui/material/TextField'\n\nexport default styled(TextField)`\n  & .Mui-disabled {\n    opacity: 0.5;\n  }\n`\n","import { styled } from '@mui/material/styles'\n\nexport const InputContainer = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`\n","import { Typography } from '@mui/material'\nimport { SxProps } from '@mui/material/styles'\nimport { useField } from 'formik'\nimport { at } from 'lodash'\nimport TextField from 'components/TextField'\nimport { InputContainer } from './styles'\n\ntype TInputFieldProps = {\n  label?: string\n  name: string\n  sx?: SxProps\n  size?: 'medium' | 'small' | undefined\n  placeholder?: string\n  handleChange?: Function\n  inputValue?: string\n}\nconst InputField = ({\n  label,\n  name,\n  sx,\n  size,\n  placeholder,\n  handleChange,\n  inputValue,\n}: TInputFieldProps) => {\n  const [field, meta] = useField(name)\n  const onChange = handleChange ? handleChange : field.onChange\n  const value = inputValue || field.value\n\n  const renderHelperText = () => {\n    const [touched, error] = at(meta, 'touched', 'error')\n    if (touched && error) {\n      return error\n    }\n    return ' '\n  }\n  return (\n    <InputContainer>\n      {label && (\n        <Typography marginBottom={1} variant=\"body1\">\n          {label}\n        </Typography>\n      )}\n      <TextField\n        type=\"text\"\n        helperText={renderHelperText()}\n        error={!!(meta.touched && meta.error && true)}\n        onChange={onChange as any}\n        onBlur={field.onBlur}\n        value={value}\n        name={name}\n        fullWidth\n        sx={sx}\n        size={size}\n        placeholder={placeholder}\n        inputProps={{\n          'data-testid': `${name}Input`,\n        }}\n      />\n    </InputContainer>\n  )\n}\n\nexport default InputField\n","/* eslint-disable  */\nimport { useContext } from 'react'\nimport * as Yup from 'yup'\nimport { Formik, Form } from 'formik'\nimport { useNavigate } from 'react-router-dom'\nimport Box from 'components/Box'\nimport Button from 'components/Button'\nimport Typography from 'components/Typography'\nimport InputField from 'components/InputField'\nimport { EsgScoreContext } from 'context'\n\nconst CreditFormSchema = Yup.object({\n  userDoc: Yup.number().required('Por favor digite seu documento').positive(),\n})\n\nexport default function CreditForm() {\n  const { setUserDoc } = useContext(EsgScoreContext)\n  const navigate = useNavigate()\n\n  return (\n    <Box\n      sx={{\n        height: '100vh',\n        width: '100vw',\n        background: 'linear-gradient(44.54deg, #0072ff -31.61%, #00f896 132.15%)',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <Box\n        sx={{\n          width: '30%',\n          height: '300px',\n          padding: 4,\n          boxShadow: 5,\n          borderRadius: 1,\n          backgroundColor: 'primary.contrastText',\n        }}\n      >\n        <Typography mb={1} textAlign=\"center\" color=\"primary.dark\" variant=\"h5\">\n          Calcule seu ESG score\n        </Typography>\n        <Formik\n          initialValues={{ userDoc: '' }}\n          onSubmit={(values) => {\n            setUserDoc(values.userDoc)\n            navigate('/loadingscore')\n          }}\n          validationSchema={CreditFormSchema}\n        >\n          {() => (\n            <Form>\n              <InputField\n                label=\"Digite seu CPF\"\n                name=\"userDoc\"\n                size=\"medium\"\n              />\n              <Button\n                  variant=\"contained\"\n                  data-testid=\"LoginButton\"\n                  type=\"submit\"\n                  sx={{\n                    width: '100%',\n                    py: 1.2,\n                    mb: 1.5,\n                  }}\n                >\n                  Calcule seu Score\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Box>\n    </Box>\n  )\n}\n"],"names":["Button","styled","TextField","InputContainer","label","name","sx","size","placeholder","handleChange","inputValue","useField","field","meta","onChange","value","marginBottom","variant","type","helperText","at","touched","error","renderHelperText","onBlur","fullWidth","inputProps","CreditFormSchema","Yup","userDoc","required","positive","CreditForm","setUserDoc","useContext","EsgScoreContext","navigate","useNavigate","Box","height","width","background","display","justifyContent","alignItems","padding","boxShadow","borderRadius","backgroundColor","Typography","mb","textAlign","color","initialValues","onSubmit","values","validationSchema","py"],"sourceRoot":""}